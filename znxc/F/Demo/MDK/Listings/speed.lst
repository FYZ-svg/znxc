C251 COMPILER V5.60.0,  speed                                                              04/09/24  13:59:24  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE speed
OBJECT MODULE PLACED IN .\Objects\speed.obj
COMPILER INVOKED BY: D:\keilC251\C251\BIN\C251.EXE ..\CODE\speed.c XSMALL INTR2 WARNINGLEVEL(3) BROWSE INCDIR(..\CODE;..
                    -\USER;..\..\lib\zf_app;..\..\lib\zf_base;..\..\lib\zf_bsp) DEBUG PRINT(.\Listings\speed.lst) TABS(2) OBJECT(.\Objects\sp
                    -eed.obj) 

stmt  level    source

    1          #include "headfile.h"
    2          //float speed_goal=0;
    3            int duty_L=0,duty_R=0;
    4            int Zhi=10,Wan=10,Shi=10;
    5          float speed_section(int flag)
    6          {
    7   1          if(L_Adc<5&&R_Adc<5&&L_S_Adc<5&&R_S_Adc<5/*&&po_time==1*/)
    8   1            return 0;
    9   1          else if(flag==normal)
   10   1            return Zhi;
   11   1          else if(flag==cross)
   12   1            return Shi;
   13   1          else
   14   1            return Wan;
   15   1      }
   16          
   17          
   18          void Get_Actual_Speed()
   19          {
   20   1        motor_L_pid.ActValue=((float)encoder_L_get()*ActSpeed_Rate*200);
   21   1        motor_R_pid.ActValue=((float)encoder_R_get()*ActSpeed_Rate*200);
   22   1      }
   23          
   24          
   25          void Speed_Loop()
   26          {     
   27   1        float inc_L, inc_R;
   28   1        Get_Actual_Speed();
   29   1          // 外轮速度限制
   30   1          if(motor_L_pid.SetValue > 5*speed_goal)
   31   1              {motor_L_pid.SetValue=5*speed_goal;}
   32   1          if(motor_R_pid.SetValue > 5*speed_goal)
   33   1              motor_R_pid.SetValue =5*speed_goal;
   34   1          if(motor_L_pid.SetValue <-5*speed_goal)
   35   1             {motor_L_pid.SetValue=-5*speed_goal;}
   36   1          if(motor_R_pid.SetValue <-5*speed_goal)
   37   1              motor_R_pid.SetValue=-5*speed_goal;
   38   1      
   39   1          inc_L = PID_Control_Pos(&motor_L_pid,0);
   40   1          inc_R = PID_Control_Pos(&motor_R_pid,0);
   41   1          duty_L += inc_L;
   42   1          duty_R += inc_R;
   43   1      
   44   1          if(duty_L < duty_min)
   45   1              duty_L = duty_min;
   46   1          if(duty_R< duty_min)
   47   1              duty_R = duty_min;
   48   1      
   49   1          if(duty_L> duty_max)
   50   1              duty_L = duty_max;
   51   1          if(duty_R > duty_max)
   52   1              duty_R = duty_max;
   53   1          duty_set(duty_L,duty_R);
   54   1      //    printf("%f,%f,%f,%f\r\n",motor_L_pid.ActValue,motor_R_pid.ActValue,motor_L_pid.SetValue,motor_R_pid.S
             -etValue);
   55   1      
   56   1      //        duty_set(-2000,-2000);
C251 COMPILER V5.60.0,  speed                                                              04/09/24  13:59:24  PAGE 2   

   57   1      
   58   1      }
   59          void duty_set(int left_duty,int right_duty)
   60          {
   61   1          if(left_duty >= 0) //正转
   62   1          {
   63   2            DIR_L = 1;       
   64   2            pwm_duty(PWM_L, left_duty);     
   65   2          }
   66   1          else         //反转
   67   1          {
   68   2            DIR_L = 0;           
   69   2            pwm_duty(PWM_L, -left_duty);  
   70   2          }
   71   1          if(right_duty >= 0) //正转
   72   1          {
   73   2            DIR_R = 1;       
   74   2            pwm_duty(PWM_R, right_duty);        
   75   2          }
   76   1          else         //反转
   77   1          {
   78   2            DIR_R = 0;           
   79   2            pwm_duty(PWM_R, -right_duty);     
   80   2          }
   81   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       481     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =        10     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        30     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

C251 COMPILER V5.60.0,  adc                                                                04/09/24  13:59:23  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE adc
OBJECT MODULE PLACED IN .\Objects\adc.obj
COMPILER INVOKED BY: D:\keilC251\C251\BIN\C251.EXE ..\CODE\adc.c XSMALL INTR2 WARNINGLEVEL(3) BROWSE INCDIR(..\CODE;..\U
                    -SER;..\..\lib\zf_app;..\..\lib\zf_base;..\..\lib\zf_bsp) DEBUG PRINT(.\Listings\adc.lst) TABS(2) OBJECT(.\Objects\adc.ob
                    -j) 

stmt  level    source

    1          #include "headfile.h" 
    2          int16 ad_valu1[4];
    3          float L_Adc,R_Adc,L_S_Adc,R_S_Adc,M_Adc;//µç¸ÐÖµ
    4          float Erro=0;
    5          int16 g_ValueOfAD[4] = {0};       //»ñÈ¡µÄµç¸ÐÖµ
    6          int16 g_ValueOfADFilter[5] = {0};
    7          int P_5[10];
    8          void Read_ADC(void)
    9          {
   10   1          int16 i,j;
   11   1        int16 ad_valu[5][10],ValueOfADOld[5],ValueOfADNew[5];
   12   1      
   13   1        //*******************************µç¸ÐÖµÂË²¨´¦Àí*******************************//    
   14   1         for(i=0;i<10;i++)
   15   1           {
   16   2               P_5[i] = adc_once(ADC_P05,ADC_12BIT);   
   17   2               ad_valu[0][i]=adc_once(ADC_P05,ADC_12BIT);      //you  heng    
   18   2               ad_valu[1][i]=adc_once(ADC_P14,ADC_12BIT);      //you   shu
   19   2               ad_valu[2][i]=adc_once(ADC_P16,ADC_12BIT);      //you    xie
   20   2               ad_valu[3][i]=adc_once(ADC_P13,ADC_12BIT);      //you    zhong
   21   2               ad_valu[4][i]=adc_once(ADC_P00,ADC_12BIT);      //zhong  heng
   22   2           }
   23   1           /*===========================³¬¼¶ÂË²¨=================================*/
   24   1      for(i = 0;i<5;i++)
   25   1      {
   26   2        int min=4000,max=0,sum = 0;
   27   2        int times = 10;
   28   2        for(j = 0;j<times;j++)
   29   2        {
   30   3      
   31   3          if(ad_valu[i][j]>max)
   32   3            max = ad_valu[i][j];
   33   3          if(min > ad_valu[i][j])
   34   3            min = ad_valu[i][j];
   35   3            sum+=ad_valu[i][j];
   36   3            ad_valu1[i] = (sum-max-min)/(times-2);
   37   3        }
   38   2      }
   39   1         for(i=0;i<5;i++)            //½«ÊýÖµÖÐ,¸öÎ»Êý³ýµô
   40   1         {
   41   2          g_ValueOfAD[i] = (int16)(ad_valu1[i]/10*10);
   42   2          //²É¼¯ÌÝ¶ÈÆ½»¬£¬Ã¿´Î²É¼¯×î´ó±ä»¯40
   43   2          ValueOfADOld[i] = g_ValueOfADFilter[i];
   44   2          ValueOfADNew[i] = g_ValueOfAD[i];
   45   2          if(ValueOfADNew[i]>=ValueOfADOld[i])
   46   2            g_ValueOfADFilter[i] = ((ValueOfADNew[i]-ValueOfADOld[i])>50?(ValueOfADOld[i]+50):ValueOfADNew[i]);
   47   2          else
   48   2            g_ValueOfADFilter[i] = ((ValueOfADNew[i]-ValueOfADOld[i])<-50?(ValueOfADOld[i]-50):ValueOfADNew[i]);
   49   2         } 
   50   1      }
   51          
   52          float Left,LeftXie,RightXie,Right,Mid;
   53          void InductorNormal (void)
   54          {
   55   1          Read_ADC();
   56   1         Left =  (float)(g_ValueOfADFilter[0]) / (3200.0 - 0.0) * 100.0;    // µç¸Ð¹éÒ»»¯   ×î´óÖµ¼õÈ¥×îÐ¡Öµ¼ÇµÃ¸
             -Ä
C251 COMPILER V5.60.0,  adc                                                                04/09/24  13:59:23  PAGE 2   

   57   1          LeftXie =  (float)(g_ValueOfADFilter[1]) / (3200.0 - 0.0) * 100.0;
   58   1          RightXie = (float)(g_ValueOfADFilter[2]) / (3200.0 - 0.0) * 100.0;    
   59   1          Right = (float)(g_ValueOfADFilter[3]) / (3200.0 - 0.0) * 100.0;   
   60   1          Mid = (float)(g_ValueOfADFilter[4]) / (3200.0 - 0.0) * 100.0;
   61   1        
   62   1      
   63   1          L_Adc = Left;       //×óµç¸Ð×îÖÕÖµ
   64   1          L_S_Adc = LeftXie;   //×óÊúµç¸Ð×îÖÕÖµ
   65   1          R_S_Adc = RightXie;  //ÓÒÊúµç¸Ð×îÖÕÖµ
   66   1          R_Adc = Right;      //ÓÒµç¸Ð×îÖÕÖµ  
   67   1          M_Adc = Mid;  
   68   1          
   69   1          if(L_Adc<=1) L_Adc = 1;
   70   1          else if(L_Adc > 100) L_Adc=100;
   71   1          if(L_S_Adc<=1) L_S_Adc = 1;
   72   1          else if(L_S_Adc > 100) L_S_Adc=100;
   73   1          if(R_S_Adc<=1) R_S_Adc = 1;
   74   1          else if(R_S_Adc > 100) R_S_Adc=100;
   75   1          if(R_Adc<=1) R_Adc = 1;
   76   1          else if(R_Adc > 100) R_Adc=100;
   77   1          if(M_Adc<=1) M_Adc = 1;
   78   1          else if(M_Adc> 100) M_Adc=100;
   79   1        }
   80          
   81          
   82          
   83          float error_get(int flag)
   84          {
   85   1        float L,R,Err;
   86   1        float Mid_M = 50;
   87   1        float M = Mid_M/M_Adc;
   88   1        if(flag==normal||flag==cross)
   89   1        {
   90   2          Err=(float)(L_Adc-R_Adc)/(float)(L_Adc+R_Adc)/**M*/;
   91   2          //P67=1;
   92   2        }
   93   1        else
   94   1        {
   95   2          L=sqrt((float)L_Adc*(float)L_Adc+(float)L_S_Adc*(float)L_S_Adc);
   96   2          R=sqrt((float)R_S_Adc*(float)R_S_Adc+(float)R_Adc*(float)R_Adc);
   97   2          Err=(L-R)/(L+R)*M*0.5; //M*0.5  
   98   2          //P67=0;
   99   2        }
  100   1          Err=Err>1.2?1.2:Err;
  101   1          Err=Err<-1.2?-1.2:Err;
  102   1          Erro = Err;
  103   1          return Err;
  104   1      }
*** WARNING C183 IN LINE 86 OF ..\CODE\adc.c: dead assignment eliminated


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       918     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =        90        128
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
C251 COMPILER V5.60.0,  adc                                                                04/09/24  13:59:23  PAGE 3   

  const size           =    ------     ------
  hconst size          =        34     ------
End of Module Information.


C251 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
